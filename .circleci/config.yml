# Python CircleCI 2.0 configuration file
# Optimized for AlmaLinux 9 deployment compatibility
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Use Python 3.9 to match AlmaLinux 9 default Python version
      - image: cimg/python:3.9
      - image: cimg/postgres:13.8
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: mks
          POSTGRES_PASSWORD: test

    working_directory: ~/repo

    steps:
      - checkout
      
      # Install system dependencies that might be needed for AlmaLinux 9 compatibility
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y \
              build-essential \
              libpq-dev \
              python3-dev \
              libjpeg-dev \
              libpng-dev \
              libfreetype6-dev \
              libxml2-dev \
              libxslt1-dev \
              zlib1g-dev

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            # Install requirements with verbose output for debugging
            pip install -r requirements.txt --verbose
            # Verify critical packages are installed
            echo "Verifying package installations..."
            python -c "import django; print(f'Django: {django.get_version()}')"
            python -c "import pandas; print(f'Pandas: {pandas.__version__}')"
            python -c "import numpy; print(f'Numpy: {numpy.__version__}')"

      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

      # Setup Django environment for testing
      - run:
          name: Setup Django environment
          command: |
            . venv/bin/activate
            # Create logs directory
            mkdir -p logs
            # Create a basic local_settings.py for testing if it doesn't exist
            if [ ! -f local_settings.py ]; then
              cat > local_settings.py << EOF
            # Test settings for CircleCI
            DEBUG = True
            
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': 'mks',
                    'USER': 'postgres',
                    'PASSWORD': 'test',
                    'HOST': 'localhost',
                    'PORT': '5432',
                }
            }
            
            SECRET_KEY = 'test-secret-key-for-ci-only'
            ALLOWED_HOSTS = ['*']
            EOF
            fi

      # run database migrations
      - run:
          name: run migrations
          command: |
            . venv/bin/activate
            export DJANGO_SETTINGS_MODULE=mks.settings
            python manage.py migrate --noinput

      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export DJANGO_SETTINGS_MODULE=mks.settings
            # Run Django system check first
            python manage.py check
            # Run the actual tests
            python manage.py test --keepdb --verbosity=2

      - store_artifacts:
          path: test-reports
          destination: test-reports
