/**
 * Overlay Menu JavaScript
 * Handles the overlay menu functionality
 */

class OverlayMenu {
  constructor() {
    this.overlay = document.getElementById('overlayMenu');
    this.trigger = document.querySelector('.mks-overlay-trigger');
    this.closeBtn = document.querySelector('.mks-overlay-close');
    this.backdrop = document.querySelector('.mks-overlay-backdrop');
    this.content = document.querySelector('.mks-overlay-content');
    
    this.isOpen = false;
    this.focusableElements = [];
    this.lastFocusedElement = null;
    
    this.init();
  }
  
  init() {
    if (!this.overlay || !this.trigger) {
      console.warn('Overlay menu elements not found');
      return;
    }
    
    this.bindEvents();
    this.setupAccessibility();
  }
  
  bindEvents() {
    // Open menu
    this.trigger.addEventListener('click', (e) => {
      e.preventDefault();
      this.open();
    });
    
    // Close menu
    this.closeBtn?.addEventListener('click', (e) => {
      e.preventDefault();
      this.close();
    });
    
    // Close on backdrop click
    this.backdrop?.addEventListener('click', () => {
      this.close();
    });
    
    // Close on Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.isOpen) {
        this.close();
      }
    });
    
    // Prevent scroll propagation
    this.content?.addEventListener('wheel', (e) => {
      e.stopPropagation();
    });
    
    // Loading states for navigation items
    this.setupLoadingStates();
  }
  
  setupAccessibility() {
    // Set up ARIA attributes
    this.trigger?.setAttribute('aria-controls', 'overlayMenu');
    this.trigger?.setAttribute('aria-expanded', 'false');
    
    // Collect focusable elements
    this.updateFocusableElements();
  }
  
  updateFocusableElements() {
    if (!this.overlay) return;
    
    const focusableSelector = [
      'button',
      '[href]',
      'input',
      'select',
      'textarea',
      '[tabindex]:not([tabindex="-1"])'
    ].join(', ');
    
    this.focusableElements = Array.from(
      this.overlay.querySelectorAll(focusableSelector)
    ).filter(el => !el.disabled && !el.hasAttribute('inert'));
  }
  
  setupLoadingStates() {
    const navItems = document.querySelectorAll('.mks-overlay-nav-item');
    
    navItems.forEach(item => {
      item.addEventListener('click', (e) => {
        // Add loading state
        item.classList.add('loading');
        
        // Remove loading state after a short delay (for better UX)
        setTimeout(() => {
          item.classList.remove('loading');
        }, 500);
      });
    });
  }
  
  open() {
    if (this.isOpen) return;
    
    this.isOpen = true;
    this.lastFocusedElement = document.activeElement;
    
    // Add classes and attributes
    this.overlay.classList.add('is-open');
    this.trigger?.setAttribute('aria-expanded', 'true');
    document.body.style.overflow = 'hidden';
    
    // Focus management
    this.updateFocusableElements();
    if (this.closeBtn) {
      this.closeBtn.focus();
    }
    
    // Trap focus within overlay
    this.trapFocus();
    
    // Announcement for screen readers
    this.announceToScreenReader('Verwaltungsmenü geöffnet');
    
    // Custom event
    this.dispatchEvent('overlayMenuOpened');
  }
  
  close() {
    if (!this.isOpen) return;
    
    this.isOpen = false;
    
    // Remove classes and attributes
    this.overlay.classList.remove('is-open');
    this.trigger?.setAttribute('aria-expanded', 'false');
    document.body.style.overflow = '';
    
    // Restore focus
    if (this.lastFocusedElement) {
      this.lastFocusedElement.focus();
    }
    
    // Remove focus trap
    this.removeFocusTrap();
    
    // Announcement for screen readers
    this.announceToScreenReader('Verwaltungsmenü geschlossen');
    
    // Custom event
    this.dispatchEvent('overlayMenuClosed');
  }
  
  toggle() {
    if (this.isOpen) {
      this.close();
    } else {
      this.open();
    }
  }
  
  trapFocus() {
    if (this.focusableElements.length === 0) return;
    
    this.focusTrapHandler = (e) => {
      if (e.key !== 'Tab') return;
      
      const firstFocusable = this.focusableElements[0];
      const lastFocusable = this.focusableElements[this.focusableElements.length - 1];
      
      if (e.shiftKey) {
        // Shift + Tab
        if (document.activeElement === firstFocusable) {
          e.preventDefault();
          lastFocusable.focus();
        }
      } else {
        // Tab
        if (document.activeElement === lastFocusable) {
          e.preventDefault();
          firstFocusable.focus();
        }
      }
    };
    
    document.addEventListener('keydown', this.focusTrapHandler);
  }
  
  removeFocusTrap() {
    if (this.focusTrapHandler) {
      document.removeEventListener('keydown', this.focusTrapHandler);
      this.focusTrapHandler = null;
    }
  }
  
  announceToScreenReader(message) {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.style.position = 'absolute';
    announcement.style.left = '-10000px';
    announcement.style.width = '1px';
    announcement.style.height = '1px';
    announcement.style.overflow = 'hidden';
    
    document.body.appendChild(announcement);
    announcement.textContent = message;
    
    // Remove after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  }
  
  dispatchEvent(eventName) {
    const event = new CustomEvent(eventName, {
      detail: { overlay: this }
    });
    document.dispatchEvent(event);
  }
}

/**
 * Statistics updater for the overlay menu
 */
class OverlayMenuStats {
  constructor() {
    this.statsCards = {
      registrations: document.getElementById('new-registrations'),
      visits: document.getElementById('website-visits'),
      blogs: document.getElementById('recent-blogs'),
      gallery: document.getElementById('gallery-images')
    };
    
    this.init();
  }
  
  init() {
    // Update stats on menu open
    document.addEventListener('overlayMenuOpened', () => {
      this.updateStats();
    });
  }
  
  async updateStats() {
    try {
      // This would typically fetch from your Django backend
      // For now, we'll just simulate the update
      this.animateNumbers();
    } catch (error) {
      console.error('Failed to update stats:', error);
    }
  }
  
  animateNumbers() {
    Object.values(this.statsCards).forEach(card => {
      if (!card) return;
      
      const numberElement = card.querySelector('.mks-overlay-stat-number');
      if (!numberElement) return;
      
      const targetText = numberElement.textContent;
      const targetNumber = parseInt(targetText.replace(/\D/g, ''));
      
      if (isNaN(targetNumber)) return;
      
      // Simple animation
      let current = 0;
      const increment = targetNumber / 30;
      const timer = setInterval(() => {
        current += increment;
        if (current >= targetNumber) {
          numberElement.textContent = targetText;
          clearInterval(timer);
        } else {
          numberElement.textContent = Math.floor(current).toLocaleString();
        }
      }, 50);
    });
  }
}

/**
 * Initialize the overlay menu when DOM is loaded
 */
document.addEventListener('DOMContentLoaded', () => {
  const overlayMenu = new OverlayMenu();
  const overlayStats = new OverlayMenuStats();
  
  // Expose to global scope for external access if needed
  window.overlayMenu = overlayMenu;
  
  // Handle any initial state from URL parameters or other sources
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('menu') === 'open') {
    overlayMenu.open();
  }
  
  // Add smooth scrolling for internal links
  document.querySelectorAll('.mks-overlay-nav-item[href^="#"]').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = link.getAttribute('href').substring(1);
      const targetElement = document.getElementById(targetId);
      
      if (targetElement) {
        overlayMenu.close();
        setTimeout(() => {
          targetElement.scrollIntoView({ behavior: 'smooth' });
        }, 300);
      }
    });
  });
});

/**
 * Handle resize events
 */
window.addEventListener('resize', () => {
  if (window.overlayMenu && window.overlayMenu.isOpen) {
    window.overlayMenu.updateFocusableElements();
  }
});

/**
 * Performance optimization: Preload critical styles
 */
if ('requestIdleCallback' in window) {
  requestIdleCallback(() => {
    // Preload any additional resources if needed
  });
}
